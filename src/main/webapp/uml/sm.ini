@startuml
autoactivate on
user -> views : 예약
views -> controller : /reservation/select_room(String bizrno)
controller -> service : selectListBizrno(String bizrno)
DATABASE database
service -> database : selectListBizrno(String bizrno)
database --> service : result List<RoomVo>
service --> controller : return List<RoomVo>
controller --> views :  request room_list
views --> user : 예약가능객실리스트
@enduml


@startuml
autoactivate on
user -> views : 예약가능일자
views -> controller : /reservation/date(String bizrno,int room_idx)
controller -> service : selectResList(int room_idx)
DATABASE database
service -> database : selectResList(int room_idx)
database --> service : result selectResList(List<ReservationVo>)
service --> controller : return List<ReservationVo>

controller -> service : selectListBizrno(String bizrno)
DATABASE database
service -> database : selectListBizrno(String bizrno)
database --> service : result selectListBizrno(List<RoomVo>)
service --> controller : return List<RoomVo>

controller -> service : selectOneRoomIdx(int room_idx)
DATABASE database
service -> database : selectOneRoomIdx(int room_idx)
database --> service : result RoomVo
service --> controller : return RoomVo


controller --> views :  request res_list, room_vo
views --> user : 예약가능일자리스트
@enduml

@startuml
autoactivate on
user -> views : 예약폼요청
views -> controller : /reservation/isert_form(ReservationVo res_vo,int checkDays, String[] checkDate)
controller -> service : selectOneRoomIdx(int room_idx)
DATABASE database
service -> database : selectOneRoomIdx(int room_idx)
database --> service : result selectOneRoomIdx(RoomVo)
service --> controller : return RoomVo

controller -> service : selectOneBizrnoVo(String bizrno);
DATABASE database
service -> database : selectOneBizrnoVo(String bizrno)
database --> service : result CampVo
service --> controller : return CampVo

controller --> controller : 요금총계계산



controller --> views :  request checkDays, amount, room_vo, res_vo, camp_vo
views --> user : 예약입력폼
@enduml


; 예약
@startuml
autoactivate on
user -> views : 예약요청
views -> controller : /reservation/isert(ReservationVo res_vo)
controller -> session : MemberVo(user)
session --> controller : return MemberVo

alt session user null
controller --> views : response map
views --> user : 로그인으로 이동
end

controller -> service : selectRes(ReservationVo res_vo)
activate controller
DATABASE database
service -> database : selectRes(ReservationVo res_vo)
database --> service : result ReservationVo
service --> controller : return List<ReservationVo>
alt 이미예약되어있을때 
controller --> views : response map
views --> user : 재예약요청
end
controller -> service : insert(ReservationVo res_vo)
activate controller
service -> database : insert(ReservationVo res_vo)
database --> service : result int
service --> controller : return int



controller --> views :  response map
views --> user : 결제요청


@enduml

; 예약 결제
@startuml
autoactivate on
user -> views : 결제
participant "TossPayments" as toss order 20
views -> toss : 결제요청
toss --> controller : /reservation/tossSuccess(String paymentType,String orderId, String paymentKey, Integer amount)
activate controller
controller -> util : payment(String paymentKey,String orderId,Integer amount)

util -> toss : confirm
toss --> util : return response

util --> controller : return response
controller -> service : updateToss(ReservationVo res_vo)


DATABASE database
service -> database : updateToss(ReservationVo res_vo)
database --> service : result ReservationVo
service --> controller : return int
controller --> views :  request res_vo, tossSuccess, bizrno
views --> user : 예약확정


@enduml

